<?php
/**
 * Implements hook_theme().
 */
function leaflet_theme($existing, $type, $theme, $path) {
  return array(
    'leaflet_map' => array(
      'arguments' => array('map_id' => NULL, 'height' => '400px'),
      // When theme('leaflet_map'...) is called, the system will look for
      // /leaflet/templates/leaflet_map.html.twig.
      'template' => 'leaflet_map',
    ),
  );
}

function leaflet_libraries_get_path($base) {
  return Drupal::moduleHandler()->moduleExists('libraries') ? libraries_get_path($base) : "sites/all/libraries/$base";
}

/**
 * Implements hook_library_info().
 */
function leaflet_library_info() {
  $leaflet_lib_path = leaflet_libraries_get_path('leaflet');

  // Not sure this format is right for D8
  $libraries['leaflet'] = array(
    'title' => 'Leaflet',
    'website' => 'http://leaflet.cloudmade.com',
    'version' => '0.6',
    'js' => array(
      array(
        'type' => 'inline',
        'data' => 'L_ROOT_URL = "' . base_path() . $leaflet_lib_path . '/";',
        'group' => JS_LIBRARY,
        'preprocess' => FALSE
      ),
      array(
        'type' => 'file',
        'data' => "$leaflet_lib_path/leaflet.js",
        'group' => JS_LIBRARY,
        'preprocess' => FALSE
      ),
    ),
    'css' => array(
      "$leaflet_lib_path/leaflet.css" => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      "$leaflet_lib_path/leaflet.ie.css" => array(
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE,
        ),
      ),
    ),
  );

  $libraries['leaflet-drupal'] = array(
    'title' => 'Leaflet initialization',
    'website' => 'http://drupal.org/project/leaflet',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'leaflet') . '/leaflet.drupal.js' => array(),
    ),
    'dependencies' => array(
      array('leaflet', 'leaflet'),
    ),
  );

  return $libraries;
}

/**
 * Load all Leaflet required client files and return markup for a map.
 *
 * @param array $map
 * @param array $features
 * @param string $height
 *
 * @return string map markup
 */
function leaflet_render_map($map, $features = array(), $height = '400px') {
  $map_id = drupal_html_id('leaflet_map');

  // Allow map definitions to provide a default icon.
  if (isset($map['icon']['iconUrl'])) {
    foreach ($features as &$feature) {
      if (!isset($feature['icon'])) {
        $feature['icon'] = $map['icon'];
      }
    }
  }
  $settings[0] = array(
    'mapId' => $map_id,
    'map' => $map,
    'features' => $features,
  );
  drupal_add_library('leaflet', 'leaflet-drupal');
  drupal_add_js(array('leaflet' => array($settings)), 'setting');

  return theme('leaflet_map', array('map_id' => $map_id, 'height' => $height));
}

/**
 * Get all avaialble Leaflet map definitions.
 *
 * @param string $map
 */
function leaflet_map_get_info($map = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['leaflet_map_info'] = &drupal_static(__FUNCTION__);
  }
  $map_info = &$drupal_static_fast['leaflet_map_info'];

  if (empty($map_info)) {
    if ($cached = cache()->get('leaflet_map_info')) {
      $map_info = $cached->data;
    }
    else {
      $map_info = module_invoke_all('leaflet_map_info');

      // Let other modules alter the map info.
      drupal_alter('leaflet_map_info', $map_info);

      cache()->set('leaflet_map_info', $map_info);
    }
  }

  if (empty($map)) {
    return $map_info;
  }
  elseif (isset($map_info[$map])) {
    return $map_info[$map];
  }
}

/**
 * Implements hook_leaflet_map_info() to return a default map.
 *
 * @return array
 */
function leaflet_leaflet_map_info() {
  return array(
    'OSM Mapnik' =>
    array(
      'label' => 'OSM Mapnik',
      'description' => t('Leaflet default map.'),
      'settings' => array(
        // 'zoom' => 18,
        'minZoom' => 0,
        'maxZoom' => 18,
        'dragging' => TRUE,
        'touchZoom' => TRUE,
        'scrollWheelZoom' => TRUE,
        'doubleClickZoom' => TRUE,
        'zoomControl' => TRUE,
        'attributionControl' => TRUE,
        'trackResize' => TRUE,
        'fadeAnimation' => TRUE,
        'zoomAnimation' => TRUE,
        'closePopupOnClick' => TRUE,
      ),
      'layers' => array(
        'earth' => array(
          'urlTemplate' => 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          'options' => array(
            'attribution' => 'OSM Mapnik'
          )
        ),
      ),
    ),
  );
}

/**
 * Convert a geofield into an array of map points.
 *
 * The map points can then be fed into leaflet_render_map().
 *
 * @param mixed $items
 *   A single vlaue or array of geo values, each as a string in any of the
 *   supported formats or as an array of $item elements, each with a
 *   $item['wkt'] field.
 *
 * @return array
 */
function leaflet_process_geofield($items = array()) {

  geophp_load();

  if (!is_array($items)) {
    $items = array($items);
  }
  $data = array();
  foreach ($items as $item) {
    // Auto-detect and parse the format (e.g. WKT, JSON etc)
    if (!($geom = geoPHP::load(isset($item['wkt']) ? $item['wkt'] : $item))) {
      continue;
    }
    $datum = array('type' => strtolower($geom->geometryType()));

    switch ($datum['type']) {
      case 'point':
        $datum += array(
          'lat' => $geom->getY(),
          'lon' => $geom->getX(),
        );
        break;

      case 'linestring':
        $components = $geom->getComponents();
        foreach ($components as $component) {
          $datum['points'][] = array(
            'lat' => $component->getY(),
            'lon' => $component->getX(),
          );
        }
        break;

      case 'polygon':
        $tmp = $geom->getComponents();
        $components = $tmp[0]->getComponents();
        foreach ($components as $component) {
          $datum['points'][] = array(
            'lat' => $component->getY(),
            'lon' => $component->getX(),
          );
        }
        break;

      case 'multipolygon':
      case 'multipolyline':
      case 'multilinestring':
        if ($datum['type'] == 'multilinestring') {
          $datum['type'] = 'multipolyline';
        }
        if ($datum['type'] == 'multipolygon') {
          $tmp = $geom->getComponents();
          $components = $tmp[0]->getComponents();
        }
        else {
          $components = $geom->getComponents();
        }
        foreach ($components as $key => $component) {
          $subcomponents = $component->getComponents();
          foreach ($subcomponents as $subcomponent) {
            $datum['component'][$key]['points'][] = array(
              'lat' => $subcomponent->getY(),
              'lon' => $subcomponent->getX(),
            );
          }
          unset($subcomponent);
        }
        break;
    }
    $data[] = $datum;
  }

  return $data;
}

/**
 * Implements hook_requirements().
 */
function leaflet_requirements($phase) {
  $requirements = array();
  if ($phase != 'runtime') {
    return $requirements;
  }
  // Ensure js library is installed. Show number of maps avaialble.
  if (file_exists(leaflet_libraries_get_path('leaflet') . '/leaflet.js')) {
    $requirements['leaflet'] = array(
      'title' => t('Leaflet library'),
      'value' => t('Installed. @maps available.', array(
        '@maps' => format_plural(count(leaflet_map_get_info()), 'One map', '@count maps'))),
      'severity' => REQUIREMENT_OK,
    );
  }
  else {
    $requirements['leaflet'] = array(
      'title' => t('Leaflet library not found'),
      'value' => t('The !leaflet javascript library was not found. Please !download it into the libraries folder. Also ensure that the library is named leaflet with a lower case "l".',
        array(
          '!leaflet' => Drupal::l('leaflet', \Drupal\Core\Url::fromUri('http://leaflet.cloudmade.com')),
          '!download' => Drupal::l('download', \Drupal\Core\Url::fromUri('http://leaflet.cloudmade.com/download.html')),
        )
      ),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}

